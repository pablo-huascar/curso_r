---
title: "R para análise de dados em Psicologia"
subtitle: "Uma Introdução"
execute:
  echo: true
author: "Francisco Pablo Huascar Aragão Pinheiro"
institute: <img src="images/ufc_horizontal.png" width="250">
format: 
  revealjs:
      theme: simple
      fig-width: 6
      fig-asp: 0.618
progress: true
slide-number: true
logo: images/lappsie.png
editor: visual
editor_options: 
  chunk_output_type: console
---

## Quem sou eu

::: {style="line-height: 1;"}
::: columns
::: {.column width="40%"}
![](images/logo_pos.png) ![](images/lappsie.png)
:::

::: {.column width="60%"}
::: incremental
-   [Psicólogo]{style="font-size:25pt;"}
-   [Doutor em educação]{style="font-size:25pt;"}
-   [Professor do campus Sobral da UFC]{style="font-size:25pt;"}
-   [Recentemente, um entusiasta do R]{style="font-size:25pt;"}
:::
:::
:::
:::

::: aside
Meu [currículo lattes](http://lattes.cnpq.br/8266089190930601): acesse [aqui](http://lattes.cnpq.br/8266089190930601)
:::

## R for Data Science

::: columns
::: {.column width="50%"}
Livro base para o mini curso
:::

::: {.column width="50%"}
[![](images/r_for_d_s.jpg){fig-alt="Capa do livro R for Data Science. Uma coruja se destaca na ilustração" fig-align="right" width="412"}](https://r4ds.had.co.nz/)
:::
:::

## R for Data Science

-   Neste [link](https://r4ds.had.co.nz/ "R for Data Science") você pode acessar a primeira edição do livro:

<https://r4ds.had.co.nz/>

-   E [aqui](https://r4ds.hadley.nz/ "R for Data Science") você pode acessar a segunda edição que ainda está sendo finalizada:

<https://r4ds.hadley.nz/>

::: aside
Estes slides tem como base o conteúdo da segunda edição
:::

# 4 Transformação de dados

## 4.1 Introdução

-   É raro que os dados estejam da forma certa para fazer análises ou gráficos
-   Transformações:
    -   Criar novas variáveis
    -   Resumir dados
    -   Renomear variáveis
    -   Reordenar casos
-   [`dplyr`](https://dplyr.tidyverse.org/index.html)
-   [`nycflights13`](https://rdrr.io/cran/nycflights13/man/flights.html)

## Pacotes

```{r}
#| label: setup
#| warning: true
#| message: false

library(tidyverse)
library(nycflights13)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   `r nrow(flights)` vôos que partiram de NYC em 2013
-   US [Bureau of Transportation Statistics](http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0)
-   `?flights`

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights

flights
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   tibble: tipo especial de banco de dados usado pelo [`tydiverse`](https://www.tidyverse.org/)
-   projetados para grandes conjuntos de dados
    -   mostram apenas as primeiras linhas e apenas as colunas que cabem na tela
    -   para ver todas as colunas: `glimpse`

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights glimpse

glimpse(flights)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

-   Tipo de cada variável
    -   `<int>`: números inteiros
    -   `<dbl>`: números reais
    -   `<chr>`: caracteres
    -   `<dttm>`: data e hora

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

-   Incluído no pacote [`ggplot2`](https://ggplot2.tidyverse.org/index.html)
-   Dados sobre economia de combustível
-   Modelos que tiveram novos lançamentos entre 1999 e 2008
-   `r nrow(mpg)` linhas (carros)
-   `r ncol(mpg)` variáveis

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

```{r}
#| label: glimpse mpg

glimpse(mpg)
```

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html)

| Variável     |                                |
|--------------|--------------------------------|
| manufacturer | Nome do fabricante             |
| model        | Nome do modelo                 |
| displ        | Cilindrada do motor, em litros |
| year         | Ano de fabricação              |
| cyl          | Número de cilindros            |
| trans        | Tipo de câmbio (transmissão)   |
| drv          | tipo de tração                 |

## Banco para exercícios: [mpg](https://ggplot2.tidyverse.org/reference/mpg.html)

| Variável |                             |
|----------|-----------------------------|
| cty      | Milhas por galão na cidade  |
| hwy      | Milhas por galão na estrada |
| fl       | Tipo de combustível         |
| class    | Tipo de carro               |
|          |                             |

## O Básico do `dplyr`

-   verbos do dplyr (funções): manipulação de dados
    -   primeiro argumento: banco de dados
    -   argumentos subsequentes: quais colunas operar: nomes das variáveis sem aspas
    -   saída: novo banco de dados
-   pipe: `|>`: "e então"

## `|>`

```{r}
#| label: pipe
glimpse(mpg)
```

## `|>`

```{r}
#| label: pipe 2

mpg |> 
  filter(manufacturer == "audi") |> 
  group_by(trans) |> 
  summarise("média na cidade" = mean(cty),
            "média na rodovia" = mean(hwy))
```

## `|>`

-   Atalho de teclado (windows)
    -   ctrl + shift + m
-   Atalho de teclado (mac os)
    -   cmd + shift + m

## 4.2 Linhas - rows (casos/sujeitos/observações)

-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)
-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)
-   [`distinct()`](https://dplyr.tidyverse.org/reference/arrange.html)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

-   filtra (mantém \| deixa passar) linhas baseado em valores das colunas (variáveis)
-   primeiro argumento: banco de dados
-   segundo e subsequentes: condições que devem ser verdade para manter a linha (caso)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
flights |> 
  filter(dep_delay > 120)
```

## Exercício

-   No banco de dados mpg, encontre os carros que tem um rendimento na cidade maior do que 17 galões por milha (`cty`)

## Resposta

```{r}
#| label: exercício - filter(mpg)

mpg |> 
  filter(cty > 17)
```

## Operadores lógicos

-   `>` maior que
-   `>=` maior ou igual que
-   `<` menor que
-   `<=` menor ou igualque
-   `==` igual a
-   `!=` não é igual a

## Operadores lógicos

-   Combinar codições:
    -   `&` "e" ("verifique ambas as condições")
    -   `,` "e" ("verifique ambas as condições")
    -   `|` "ou" ("verifique qualquer uma das condições")

## Operadores lógicos

```{r}
#| label: Voos que partiram em 1º de janeiro

flights |> 
  filter(day == 1 & month == 1)
```

## Exercícios

No banco de dados `mpg`, encontre os carros da fabricante (`manufacturer`) "jeep" que têm 6 cilindros (`cyl`)

## Resposta

```{r}
#| label: exercício - filter &
mpg |> 
  filter(manufacturer == "jeep" & cyl == 6)
```

## Resposta

```{r}
#| label: exercício - filter & (solução alternativa)
mpg |> 
  filter(manufacturer == "jeep", cyl == 6)
```

## Operadores lógicos

```{r}
#| label: Voos que partiram em janeiro ou fevereiro

flights |> 
  filter(month == 1 | month == 2)
```

## Operadores lógicos

```{r}
#| label: "%in%"

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2))
```

## Operadores lógicos

```{r}
#| label: segundo exemplo

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2,6,11))
```

## Exercícios

No banco de dados `mpg`, localize os carros que tem 6 ou 8 cilindors (`cyl`)

## Resposta

```{r}
#| label: exercício - filter |

mpg |> 
  filter(cyl == 6 | cyl == 8)
```

## Resposta

```{r}
#| label: exercício - filter | resposta alternativa

mpg |> 
  filter(cyl %in% c(6,8))
```

## Exercícios

No banco de dados `mpg`, ache os carros que foram fabricados (`manufacturer`) pelas marcas honda, nissan ou toyota

## Resposta

```{r}
#| label: exercício - filter %in%

mpg |> 
  filter(manufacturer %in% c("honda", "nissan", "toyota"))
```

## Resposta

```{r}
#| label: exercício - filter %in% - resposta alternativa

mpg |> 
  filter(manufacturer == "honda" | manufacturer == "nissan" | manufacturer == "toyota")

```

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

-   Nunca altera o banco de dados original
-   É criado um novo banco de dados
-   Para salvar o novo banco de dados, use o operador `<-`

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
jan1 <- flights |> 
  filter(month == 1 & day == 1)

jan1
```

## Exercício

A partir do banco de dados `mpg`, salve um novo banco de dados chamado `ford` com todos os carros fabricados por esta marca.

## Resposta

```{r}
#| label: salvando os dados filtrados

ford <- mpg |> 
  filter(manufacturer == "ford")

ford
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

-   Muda a ordem das linhas baseado nos valores das colunas

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

::: panel-tabset
### Sem ordem

```{r}
#| label: sem ordem

flights  
```

### Atraso na partida

```{r}
#| label: exemplo de arranje com uma só variável 2

flights |> 
  arrange(dep_delay)
```
:::

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)
-   Mais de um nome de coluna: cada coluna adicional desempata os valores das colunas anteriores

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

```{r}
#| label: exemplo de arrange com mais de uma variável

flights |> 
  arrange(dep_delay, arr_time)
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

- Para ver do maior pro menor: `desc()`

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)

```{r}
#| label: desc()

flights |> 
  arrange(desc(dep_delay))
```

## Exercícios

No banco `mpg`, identifique o modelo com pior rendimento na cidade (`cty`)

## Resposta

```{r}
mpg |> 
  arrange(cty)
```

## Exercícios

No banco `mpg`, encontre o modelo com melhor rendimento na estrada (`hwy`)

## Resposta

```{r}
mpg |> 
  arrange(desc(hwy))
```

## Exercício 

No banco `mpg`, ache o carro da marca ford (`manufacturer`) com melhor rendimento na cidade (`cty`)

## Resposta

```{r}
mpg |> 
  filter(manufacturer == "ford") |> 
  arrange(desc(cty))
```

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)
-   Localiza todas as linhas únicas em um conjunto de dados

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)

::: panel-tabset
### Origem
```{r}
flights |> 
  distinct(origin)
```

### Destino
```{r}
flights |> 
  distinct(dest)
```
:::

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html)

```{r}
flights |> 
  distinct(origin,dest)
```

## Exercícios

Quais são os fabricantes (`manufacturer`) encontrados no banco `mpg`

## Resposta

```{r}

mpg |> 
  distinct(manufacturer)
```

## Exercícios

No banco `mpg`, crie uma lista com os fabricantes (`manufacturer`) e seus respectivos modelos

## Resposta

```{r}

mpg |> 
  distinct(manufacturer,model) 
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)
- Número de ocorrências em cada categoria

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}

flights |> 
  count(dest)
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}
flights |> 
  count(origin, dest)
  
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

- O argumento `sort = TRUE` mostra o número de ocorrências em ordem descendente

## [`count()`](https://dplyr.tidyverse.org/reference/count.html)

```{r}
flights |> 
  count(dest,sort = T)
```

## Exercício

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`)

## Resposta

```{r}
mpg |> 
  count(manufacturer)
```

## Exercício

Agora, mostre a quantidade de ocorrências somente do fabricante (`manufacturer`) jeep

## Resposta

```{r}
mpg |> 
  filter(manufacturer == "jeep") |> 
  count(manufacturer)
```

## Exercício

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`) e seus respectivos modelos (`model`)

## Resposta

```{r}
mpg |> 
  count(manufacturer, model)
```


## Exercícios {.smaller}
-   Em um único pipeline, encontre todos os voos que atendem a todas as seguintes condições:
    -   Tiveram um atraso de chegada de duas ou mais horas;
    -   Voaram para Houston (IAH ou HOU);
    -   Foram operados pela United, American ou Delta;
    -   Partiram no verão (julho, agosto e setembro);
    -   Chegaram com mais de duas horas de atraso, mas não saíram atrasados;
    -   Atrasaram-se em pelo menos uma hora, mas compensaram mais de 30 minutos de voo.

## Exercícios
Tiveram um atraso de chegada (`arr_delay`) de duas ou mais horas.

## Resposta

```{r}
flights |> 
  filter(arr_delay >= 120)
  
```

## Exercícios

Voaram para Houston (IAH ou HOU - `dest`).

## Resposta

```{r}
flights |> 
  filter(dest %in% c("IAH","HOU"))
```

## Exercícios
Foram operados (`carrier`) pela United, American ou Delta. Podemos encontrar os códigos da transportadora para as companhias aéreas no banco de dados `airlines`

## Resposta

```{r}
flights |> 
  filter(carrier %in% c("UA","AA","DL"))
```

## Exercícios

Partiram no verão (julho, agosto e setembro - `month`).

## Resposta
```{r}
flights |> 
  filter(month %in% c(7,8,9))
```

## Exercícios
Chegaram com mais de duas horas de atraso (`arr_delay`), mas não saíram atrasados (`dep_delay`).

## Resposta

```{r}
flights |> 
   filter(arr_delay > 120 &  dep_delay <= 0)
```

## Exercícios
Atrasaram-se em pelo menos uma hora, mas compensaram mais de 30 minutos de voo.

## Resposta

Se um voo atrasou pelo menos uma hora, então dep_delay >= 60. Se o voo não recuperou tempo no ar, então sua chegada seria atrasada pelo mesmo valor que sua partida, significando dep_delay == arr_delay , ou alternativamente, dep_delay - arr_delay == 0. Se compensou mais de 30 minutos no ar, o atraso de chegada deve ser pelo menos 30 minutos menor que o atraso de partida, que é declarado como dep_delay - arr_delay >= 30.

## Resposta

```{r}
atrasos <- 
  tibble(dep_delay = c(10,15,30,60,120,180)) |> 
  mutate(arr_delay = dep_delay - 30,
         dep_delay_arr_delay = dep_delay - arr_delay)
atrasos
```


## Resposta

```{r}
flights |> 
  filter(dep_delay >= 60 & dep_delay - arr_delay >= 30)
```

## Exercícios

Classifique o banco de dados `flights` para encontrar os voos com os maiores atrasos de partida (`dep_delay`) mais longos

## Resposta

```{r}

flights |> 
  arrange(desc(dep_delay))
```

## Exercícios

Houve um voo em todos os dias de 2013?

## Resposta

```{r}
flights  |> 
  filter(year == 2013)  |>
  distinct(month, day) |> 
  count(month)
  
```


## Compartilhar conhecimento sempre!

O código e as imagens utilizados para a construção desse slide estão disponíveis [aqui](https://github.com/pablo-huascar/curso_r), assim como os slides em formato PDF:

<https://github.com/pablo-huascar/curso_r>
